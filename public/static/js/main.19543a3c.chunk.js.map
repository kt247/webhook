{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","reducers.js","actions.js","actionTypes.js","websocket.js","index.js"],"names":["module","exports","connect","state","props","connectStatus","showNotifications","notifications","map","notification","index","key","className","type","result","message","JSON","stringify","data","src","logo","alt","Boolean","window","location","hostname","match","initialState","updateConnectStatus","payload","store","ws","WebSocket","process","onmessage","onMessage","onopen","onOpen","onclose","onClose","onerror","onError","event","parse","eventHandler","err","console","log","dispatch","status","code","setTimeout","updateNotifications","createStore","action","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.19543a3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App(props) {\n  const { connectStatus, notifications } = props;\n  const showNotifications = notifications.map((notification, index) => (\n    <div key={index} className='detail'>\n      <div>\n        <div className='d-inline font-weight-bold'>Type:</div>\n        <div className='d-inline font-weight-bold p-2'>{notification.type}</div>\n      </div>\n      <div>\n        <div className='d-inline font-weight-bold'>Result:</div>\n        {notification.result ? (\n          <div className='d-inline p-2 text-success'>Success</div>\n        ) : (\n          <div className='d-inline p-2 text-danger'>Failed</div>\n        )}\n      </div>\n      <div>\n        <div className='d-inline font-weight-bold'>Message:</div>\n        <div className='d-inline p-2'>{notification.message}</div>\n      </div>\n      <div>\n        <div className='d-inline font-weight-bold'>Data:</div>\n        <div className='d-inline p-2'>{JSON.stringify(notification.data)}</div>\n      </div>\n      <hr />\n    </div>\n  ));\n  return (\n    <div className='d-flex flex-column min-vh-100'>\n      <header className='d-flex align-items-center justify-content-center'>\n        <nav className='navbar'>\n          <img className='App-logo' src={logo} alt='ECO' />\n          <span className='title'>\n            Open ECO Webhook - For testing purposes only\n          </span>\n        </nav>\n        <nav className='navbar'>\n          <span className='title'>\n            Status:\n            {connectStatus ? (\n              <span className='text-success'>\n                <div className='dot'>\n                  <div className='dot-green' />\n                </div>\n                Connected\n              </span>\n            ) : (\n              <span className='text-danger'>\n                <div className='dot'>\n                  <div className='dot-red' />\n                </div>\n                Disconnected\n              </span>\n            )}\n          </span>\n        </nav>\n      </header>\n\n      <main className='d-flex align-items-top justify-content-center'>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-sm-9 col-md-7 col-lg-12 mx-auto'>\n              <div className='card card-signin my-5'>\n                <div className='card-body text-center'>\n                  <h5 className='card-title'>Notifications</h5>\n                  {showNotifications}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <footer className='d-flex align-items-center justify-content-center'>\n        <div className='container text-center'>\n          <span className='text-white-50'>\n            &copy; 2020 Finviet Corporation. All rights reserved.\n          </span>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default connect((state) => state)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as t from './actionTypes';\n\nconst initialState = {\n  connectStatus: false,\n  notifications: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case t.UPDATE_CONNECT_STATUS:\n      return {\n        ...state,\n        connectStatus: action.payload.status,\n      };\n\n    case t.REGISTRATION:\n    case t.BALANCE:\n    case t.CHANGE_PIN:\n    case t.LINK_BANK:\n    case t.UNLINK_BANK:\n    case t.CASHIN_VIA_LINKED_BANK:\n    case t.CASHIN_VIA_UNLINK_BANK:\n    case t.CASHOUT_VIA_LINKED_BANK:\n    case t.CASHOUT_VIA_UNLINK_BANK:\n    case t.TRANSFER:\n    case t.ALIPAY:\n      return {\n        ...state,\n        notifications: [...state.notifications, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n","import * as t from \"./actionTypes\";\n\nexport function updateConnectStatus(payload) {\n  return {\n    type: t.UPDATE_CONNECT_STATUS,\n    payload,\n  };\n}\n\nexport function updateNotifications(event, payload) {\n  return {\n    type: event,\n    payload,\n  };\n}\n","export const UPDATE_CONNECT_STATUS = 'UPDATE_CONNECT_STATUS';\nexport const BALANCE = 'BALANCE';\nexport const CHANGE_PIN = 'CHANGE_PIN';\nexport const REGISTRATION = 'REGISTRATION';\nexport const LINK_BANK = 'LINK_BANK';\nexport const UNLINK_BANK = 'UNLINK_BANK';\nexport const CASHIN_VIA_LINKED_BANK = 'CASHIN_VIA_LINKED_BANK';\nexport const CASHIN_VIA_UNLINK_BANK = 'CASHIN_VIA_UNLINK_BANK';\nexport const CASHOUT_VIA_LINKED_BANK = 'CASHOUT_VIA_LINKED_BANK';\nexport const CASHOUT_VIA_UNLINK_BANK = 'CASHOUT_VIA_UNLINK_BANK';\nexport const TRANSFER = 'TRANSFER';\nexport const ALIPAY = 'ALIPAY';\n","import * as t from './actionTypes';\nimport { updateConnectStatus, updateNotifications } from './actions';\n\nconst AUTO_RECONNECT_INTERVAL = 1000; //1 seconds\nlet store = null;\n\nexport const connectToWebSocket = (reduxStore) => {\n  store = reduxStore;\n  connect();\n};\n\nconst connect = () => {\n  const wsUrl = process.env.REACT_APP_WS_URL;\n  const ws = new WebSocket(`${wsUrl}/ws/dashboard`);\n\n  ws.onmessage = onMessage;\n  ws.onopen = onOpen;\n  ws.onclose = onClose;\n  ws.onerror = onError;\n};\n\nconst onMessage = (event) => {\n  try {\n    const message = JSON.parse(event.data);\n    eventHandler(message);\n  } catch (err) {}\n};\n\nconst onOpen = () => {\n  console.log('Connection established.');\n  store.dispatch(updateConnectStatus({ status: true }));\n};\n\nconst onError = () => {\n  store.dispatch(updateConnectStatus({ status: false }));\n};\n\nconst onClose = (event) => {\n  if (event.code !== 1000) {\n    console.log(`WebSocket connection closed with code: ${event.code}.`);\n    store.dispatch(updateConnectStatus({ status: false }));\n    // try to reconnect\n    setTimeout(() => {\n      connect();\n    }, AUTO_RECONNECT_INTERVAL);\n  }\n};\n\nconst eventHandler = ({ event, payload }) => {\n  switch (event) {\n    case t.REGISTRATION:\n    case t.BALANCE:\n    case t.CHANGE_PIN:\n    case t.LINK_BANK:\n    case t.UNLINK_BANK:\n    case t.CASHIN_VIA_LINKED_BANK:\n    case t.CASHIN_VIA_UNLINK_BANK:\n    case t.CASHOUT_VIA_LINKED_BANK:\n    case t.CASHOUT_VIA_UNLINK_BANK:\n    case t.TRANSFER:\n    case t.ALIPAY:\n      store.dispatch(updateNotifications(event, payload));\n      break;\n  }\n};\n","import * as dotenv from \"dotenv\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport { connectToWebSocket } from \"./websocket\";\n\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\nif (window.WebSocket) {\n  connectToWebSocket(store);\n} else {\n  console.log(\"WebSocket is not supported by your browser.\");\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}